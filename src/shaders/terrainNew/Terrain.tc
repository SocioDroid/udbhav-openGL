#version 460 core

layout(vertices=3) out;

uniform mat4 u_modelMatrix;
uniform mat4 u_viewMatrix;

in vec2 a_texcoord_out[];
in vec3 FragPos[];

out vec2 a_texcoord_tcs_out[];
out vec3 FragPos_tcs_out[];

uniform vec3 gEyeWorldPos;
uniform float tessLevel;
uniform float tessMultiplier;
					   
uniform vec3 seed;

// attributes of the input CPs                                                                  
in vec3 WorldPos_CS_in[];                                                                       
in vec2 TexCoord_CS_in[];                                                                       
in vec3 Normal_CS_in[];                                                                         
                                                                                                
// attributes of the output CPs                                                                 
//out vec3 WorldPos_ES_in[];                                                                      
//out vec2 TexCoord_ES_in[];                                                                      
//out vec3 Normal_ES_in[]; 


float Random2D(in vec2 st)
{
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}

float Interpolate(float a, float b, float x) {  // cosine interpolation
	float ft = x * 3.1415927f;
	float f = (1 - cos(ft)) * 0.5;
	return  a * (1 - f) + b * f;
}

float InterpolatedNoise(int ind, float x, float y) {
	int integer_X = int(floor(x));
	float fractional_X = fract(x);
	int integer_Y = int(floor(y));
	float fractional_Y = fract(y);
	vec2 randomInput = vec2(integer_X, integer_Y);
	float a = Random2D(randomInput);
	float b = Random2D(randomInput + vec2(1.0, 0.0));
	float c = Random2D(randomInput + vec2(0.0, 1.0));
	float d = Random2D(randomInput + vec2(1.0, 1.0));
	//float v1 = Random2D(randomInput);
	//float v2 = Random2D(randomInput + vec2(1.0, 0.0));
	//float v3 = Random2D(randomInput + vec2(0.0, 1.0));
	//float v4 = Random2D(randomInput + vec2(1.0, 1.0));

	vec2 w = vec2(fractional_X, fractional_Y);
	w = w*w*w*(10.0 + w*(-15.0 + 6.0*w));

	//fractional_X = smoothstep(0.0, 1.0, fractional_X);
	//fractional_Y = smoothstep(0.0, 1.0, fractional_Y);
	//return a + fractional_X*(b-a) + fractional_Y*c + fractional_X*fractional_Y*(d-c) - a*fractional_Y - fractional_X*fractional_Y*(b-a);
	float k0 = a, 
	k1 = b - a, 
	k2 = c - a, 
	k3 = d - c - b + a;

	return k0 + k1*w.x + k2*w.y + k3*w.x*w.y;
}

const mat2 m = mat2(0.8,-0.6,0.6,0.8);

uniform int octaves;
uniform float gDispFactor;      
uniform float freq;

uniform float power;

float perlin(float x, float y){
	
    int numOctaves = octaves;
	float persistence = 0.5;
	float total = 0,
		frequency = 0.005*freq,
		amplitude = gDispFactor;
	for (int i = 0; i < numOctaves; ++i) {
		frequency *= 2.;
		amplitude *= persistence;
		
		total += InterpolatedNoise( 0, x * frequency, y * frequency) * amplitude;
	}
	return pow(total, power);
}

float perlin(vec2 st){
    
    //st *= freq;
    
    //int numOctaves = 10;
	float persistence = 0.5;
	float total = 0.0,
		frequency = 0.005*freq,
		amplitude = gDispFactor;
	for (int i = 0; i < octaves; ++i) {
		frequency *= 2.0;
		amplitude *= persistence;

        //st = frequency*m*st;

		vec2 v = frequency*m*st;

		total += InterpolatedNoise(0, v.x,v.y) * amplitude;
	}
	return pow(total, power);
}
                                                                                                
float GetTessLevel(float Distance0, float Distance1)                                            
{                                                       

    float AvgDistance = (Distance0 + Distance1) / 2.0;
    if (AvgDistance <= 35.0*10.0) { 
	        return 60.0;                                                                            
    }
    if (AvgDistance <= 70.0*10.0) { 
        return 30.0;                                                                            
    }
	else if (AvgDistance <= 300.0*10.0) { 
        return 10.0;                                                                            
    }else if(AvgDistance <= 1200.0*10.0){
		return 2.5;
	}
    else if (AvgDistance <= 3000.0*10.0) {  
        return 1.0;                                                                             
    }                                                                                           
    else {                                 
        return 1.0;                                                                             
    }
}                                                                                               


void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    a_texcoord_tcs_out[gl_InvocationID] = a_texcoord_out[gl_InvocationID];   
    FragPos_tcs_out[gl_InvocationID] = FragPos[gl_InvocationID];

    if(gl_InvocationID == 0)
    {

    vec3 WorldPos1 = vec3(FragPos_tcs_out[0].x, perlin(FragPos_tcs_out[0].xz), FragPos_tcs_out[0].z);
	vec3 WorldPos2 = vec3(FragPos_tcs_out[1].x, perlin(FragPos_tcs_out[1].xz), FragPos_tcs_out[1].z);
	vec3 WorldPos3 = vec3(FragPos_tcs_out[2].x, perlin(FragPos_tcs_out[2].xz), FragPos_tcs_out[2].z);

    float EyeToVertexDistance0 = distance(gEyeWorldPos, WorldPos1);                     
    float EyeToVertexDistance1 = distance(gEyeWorldPos, WorldPos2);                
    float EyeToVertexDistance2 = distance(gEyeWorldPos, WorldPos3);                      
                                                                                                
    // Calculate the tessellation levels                                                        
    gl_TessLevelOuter[0] = tessMultiplier*GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);            
    gl_TessLevelOuter[1] = tessMultiplier*GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance0);            
    gl_TessLevelOuter[2] = tessMultiplier*GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);            
    gl_TessLevelInner[0] = gl_TessLevelOuter[2];  

       /* old implimentation
        const int MIN_TESS_LEVEL = 4;
        const int MAX_TESS_LEVEL = 64;
        const float MIN_DISTANCE = 20;
        const float MAX_DISTANCE = 800;

        vec4 eyeSpacePos00 = u_viewMatrix * u_modelMatrix * gl_in[0].gl_Position;
        vec4 eyeSpacePos01 = u_viewMatrix * u_modelMatrix * gl_in[1].gl_Position;
        vec4 eyeSpacePos10 = u_viewMatrix * u_modelMatrix * gl_in[2].gl_Position;
        vec4 eyeSpacePos11 = u_viewMatrix * u_modelMatrix * gl_in[3].gl_Position;

        // "distance" from camera scaled between 0 and 1
        float distance00 = clamp( (abs(eyeSpacePos00.z) - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
        float distance01 = clamp( (abs(eyeSpacePos01.z) - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
        float distance10 = clamp( (abs(eyeSpacePos10.z) - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
        float distance11 = clamp( (abs(eyeSpacePos11.z) - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );

        float tessLevel0 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance10, distance00) );
        float tessLevel1 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance00, distance01) );
        float tessLevel2 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance01, distance11) );
        float tessLevel3 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance11, distance10) );

        gl_TessLevelOuter[0] = tessLevel0;
        gl_TessLevelOuter[1] = tessLevel1;
        gl_TessLevelOuter[2] = tessLevel2;
        gl_TessLevelOuter[3] = tessLevel3;

        gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
        gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);*/

    }
}
